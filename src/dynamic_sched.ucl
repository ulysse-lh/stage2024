module main {

function cond(l: integer): boolean;
function slow(l: integer): integer;
function fast(l: integer): integer;

type State = enum {
    S0, S1, S2
};

var x1, x2: integer;
var state2: State;

var x_in: integer;

var t: integer;

init {
    havoc x_in;

    x1 = x_in;
    x2 = x_in;
    state2 = S0;

    t = 0;
}



next {
    t' = t + 1;
    call next1();
    call next2();
}



procedure next1() modifies x1; {
    x1 = if (cond(x1)) then slow(x1) else fast(x1);
}


procedure next2() modifies x2, state2; {
    case
        state2 == S0: {
            if (cond(x2)) {
                state2 = S1;
            } else {
                x2 = fast(x2);
            }
        }
        state2 == S1: {
            state2 = S2;
        }
        state2 == S2: {
            x2 = slow(x2);
            state2 = S1;
        }
    esac;
}


invariant goal1: (t > 0 && old(state2) == S0 && state2 == S0 && old(x1) == old(x2) ==> x1 == x2);
invariant goal2: (t > 2 && old(state2) == S2 && history(state2, 3) == S0 && state2 == S0 && history(x1, 3) == history(x2, 3) ==> history(x1, 2) == x2);



control {
    o = induction(6);
    check;print_results;
    o.print_cex;
}



}
