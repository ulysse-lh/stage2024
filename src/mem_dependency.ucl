module main {


const N: integer;

var tmp1, tmp2: integer;

var hist1, hist2: [integer]integer;
var pixel: [integer]integer;
var i1, i2: integer;
var state1, state2: integer;
var t: integer;

var hist: [integer]integer;

init {

    assume N > 0;

    havoc hist;

    hist1 = hist;
    hist2 = hist;
    t = 0;
    state1 = 0;
    state2 = 0;
    i1 = 0;
    i2 = 0;
}

next {
    t' = t + 1;
    call next1();
    call next2();
}


procedure next1() modifies hist1, i1, state1; {
    case
        state1 == 0: {
            if (i1 >= N) {
                state1 = 1;
            } else {
                hist1[pixel[i1]] = hist1[pixel[i1]] + 1;
                i1 = i1 + 1;
            }
        }
    esac;
}

procedure next2() modifies tmp1, tmp2, hist2, i2, state2; {

    case
        state2 == 0: {
            if (i2 >= N) {
                state2 = 5;
            } else {
                if (i2 > 0 && pixel[i2] == pixel[i2 - 1]) {
                    state2 = 1;
                } else {
                    tmp1 = pixel[i2];
                    state2 = 3;
                }
            }
        }
        state2 == 1: {
            state2 = 2;
        }
        state2 == 2: {
            tmp1 = pixel[i2];
            state2 = 3;
        }
        state2 == 3: {
            tmp2 = hist2[tmp1];
            state2 = 4;
        }
        state2 == 4: {
            hist2[tmp1] = tmp2 + 1;
            i2 = i2 + 1;
            state2 = 0;
        }
    esac;
}





invariant valid_stuff: t >= 0 && 0 <= state1 <= 1 && 0 <= state2 <= 5 &&
                        (t < N ==> i1 == t) && 0 <= i1 <= t && 0 <= i2 <= t && (t > 0 && state1 == 1 ==> old(state1) == 1 || old(state1) == 0) &&
                        (t > 0 && state2 == 5 ==> old(state2) == 5 || old(state2) == 0) && (t > 0 && state2 == 0 ==> old(state2) == 4) &&
                        (t > 0 && state2 == 1 ==> old(state2) == 0) && (t > 0 && state2 == 2 ==> old(state2) == 1) &&
                        (t > 0 && state2 == 3 ==> old(state2) == 0 || old(state2) == 2) && (t > 0 && state2 == 4 ==> old(state2) == 3);


invariant goal: state1 == 0 && state2 == 0 && i1 == i2 ==> hist1 == hist2;





control {
    o = induction(6);
    check;print_results;
    o.print_cex();
}














}
