module main {

function cond(l: integer): boolean;
function slow(l: integer): integer;
function fast(l: integer): integer;

var x1, x2: integer;
var i1, i2: integer;
var state2: integer;

var x_in: integer;

var t: integer;

init {
    havoc x_in;

    x1 = x_in;
    x2 = x_in;
    state2 = 0;
    i1 = 0;
    i2 = 0;

    t = 0;
}



next {
    t' = t + 1;
    call (x1', i1') = next1(x1, i1);
    call (x2', i2', state2') = next2(x2, i2, state2);
}



procedure next1(x: integer, i: integer) returns (x1: integer, i1: integer) {
    x1 = if (cond(x)) then slow(x) else fast(x);
    i1 = i + 1;
}


procedure next2(x: integer, i: integer, state: integer) returns (x1: integer, i1: integer, state1: integer) {


    x1 = x;
    i1 = i;
    state1 = state;

    case
        state == 0: {
            if (cond(x)) {
                state1 = 1;
            } else {
                x1 = fast(x);
                i1 = i + 1;
            }
        }
        state == 1: {
            state1 = 2;
        }
        state == 2: {
            x1 = slow(x);
            i1 = i + 1;
            state1 = 0;
        }
    esac;
}

invariant valid_stuff: t >= 0 && i1 == t && 0 <= i2 <= t;
invariant goal: i1 == i2 ==> x1 == x2;



control {
    o = induction(6);
    check;print_results;
    o.print_cex;
}



}
