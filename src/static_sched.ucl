module main {


function foo(l: integer): integer;
function bar(l: integer): integer;

var x1, x2: integer;
var i1, i2: integer;
var state1, state2: integer;

var t: integer;

var x_in: integer;

init {
    havoc x_in;

    x1 = x_in;
    x2 = x_in;
    i1 = 0;
    i2 = 0;
    state1 = 0;
    state2 = 0;
    t = 0;
}


next {
    t' = t + 1;
    call next1();
    call next2();
}



procedure next1() modifies x1, i1, state1; {
    case
        state1 == 0: {
            state1 = 1;
        }
        state1 == 1: {
            if (i1 >= 8) {
                state1 = 2;
            } else {
                x1 = foo(bar(x1));
                i1 = i1 + 1;
            }
        }
    esac;
}


procedure next2() modifies x2,i2, state2; {
    case
        state2 == 0: {
            state2 = 1;
        }
        state2 == 1: {
            if (i2 >= 8) {
                state2 = 4;
            } else {
                x2 = bar(x2);
                state2 = 2;
            }
        }
        state2 == 2: {
            i2 = i2 + 1;
            x2 = foo(x2);
            state2 = 3;
        }
        state2 == 3: {
            state2 = 1;
        }
    esac;
}


invariant valid_stuff: t >= 0 && 0 <= state1 <= 2 && 0 <= state2 <= 4 && 0 <= i1 <= t && 0 <= i2 <= t &&
                        (t > 0 && old(state1) == 0 ==> state1 == 1) && (t > 0 && state1 == 1 ==> old(state1) == 0 || old(state1) == 1) &&
                        (t > 0 && state1 == 2 ==> old(state1) == 2 || old(state1) == 1) && (t > 0 && old(state2) == 0 ==> state2 == 1) &&
                        (t > 0 && state2 == 1 ==> old(state2) == 0 || old(state2) == 3) && (t > 0 && state2 == 2 ==> old(state2) == 1) &&
                        (t > 0 && state2 == 3 ==> old(state2) == 2) && (t > 0 && state2 == 4 ==> old(state2) == 4 || old(state2) == 1) &&
                        (state1 > 0 <==> t > 0) && (state2 > 0 <==> t > 0);

invariant same_iter: state1 == 1 && state2 == 1 && i1 == i2 ==> x1 == x2;

invariant goal: state1 == 2 && state2 == 4 ==> i1 == i2;



control {
    o = induction(10);
    check;print_results;
    o.print_cex;
}





}
