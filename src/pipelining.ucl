module main {


function foo(l: integer): integer;
function bar(l: integer): integer;
function baz(l: integer): integer;

const N: integer;


var in12: [integer]integer;
var out1, out2: [integer]integer;
var A1, A2, B1, B2: [integer]integer;
var i1, i2: integer;
var finished1, finished2: boolean;

var t: integer;


var A_in, B_in, out_in: [integer]integer;

init {
    assume N > 0;

    havoc in12;
    havoc A_in;
    havoc B_in;
    havoc out_in;

    A1 = A_in;
    A2 = A_in;
    B1 = B_in;
    B2 = B_in;
    out1 = out_in;
    out2 = out_in;


    i1 = 0;
    i2 = 0;
    finished1 = false;
    finished2 = false;
    t = 0;
}




next {
    t' = t + 1;
    call next1();
    call next2();
}




procedure next1() modifies A1, B1, out1, i1, finished1; {
    if (!finished1) {
        if (i1 >= N) {
            finished1 = true;
        } else {

            A1[i1] = foo(in12[i1]);
            B1[i1] = bar(A1[i1]);
            out1[i1] = B1[i1];
            i1 = i1 + 1;
        }
    }
}



procedure next2() modifies A2, B2, out2, i2, finished2; {
    if (!finished2) {
        if (i2 >= N + 2) {
            finished2 = true;
        } else {

            if (i2 < N) {
                A2[i2] = foo(in12[i2]);
            }

            if (1 <= i2 < N + 1) {
                B2[i2 - 1] = bar(A2[i2]);
            }

            if (2 <= i2) {
                out2[i2 - 2] = bar(B2[i2 - 2]);
            }

            i2 = i2 + 1;
        }
    }
}



invariant valid_stuff: t >= 0 && 0 <= i1 <= t && 0 <= i2 <= t && (t < N ==> i1 == i2 && i1 == t) &&
                        (finished1 ==> i1 == N) && (finished2 ==> i2 == N + 2) && (t > N ==> finished1) && (t > N + 2 ==> finished2);



invariant zer: A1 == A2;
//invariant sldfkf: finished1 && finished2 ==> out1 == out2;
//invariant dqsflk: forall (k: integer) :: 0 <= k < i1 - 3 && k < i2 - 3 ==> out1[k] == out2[k];



control {
    o = induction(6);
    check;print_results;
    o.print_cex(N, t, i1, i2, out1, out2, A1, A2, B1, B2, finished1, finished2);
}


}
