module main {



/*

To run:

    Â» uclid -y "cvc5 --lang=sygus2" synthesis.ucl

*/


synthesis function synth1(u: integer, v: integer): boolean;
synthesis function synth2(u: integer, v: integer): boolean;
synthesis function synth3(u: integer, v: integer): boolean;


type State = enum {
    S0, S1, S2, S3
};

var state: State;
var i: integer;
var cpt: integer;

var int_in: integer;

var t: integer;

init {
    havoc int_in;
    i = int_in;
    cpt = int_in;
    state = S0;

    t = 0;
}





next {
    t' = t + 1;
    call next_impl();
}


procedure next_impl() modifies state, i, cpt; {
    case
        state == S0: {
            if (!synth1(i, cpt)) {
                state = S1;
            }
            i = i + 1;
        }
        state == S1: {
            state = if (synth2(i, cpt)) then S0 else S2;
            cpt = cpt + 1;
        }
        state == S2: {
            state = if (synth3(i, cpt)) then S0 else S3;
            cpt = cpt + 1;
        }
    esac;
}




//invariant valid_stuff: t >= 0;


invariant inv: state == S0 ==> i == cpt;






control {
    o = induction(6);
    check;print_results;
    o.print_cex;
}




}
