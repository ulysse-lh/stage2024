module main {


    type t_SpecSCC_10_fsm_state_new = enum {
        SpecSCC_10_fsm_Proceed,
        SpecSCC_10_fsm_x1__Rollback,
        SpecSCC_10_fsm_x1__Fill0,
        SpecSCC_10_fsm_x1__Fill1,
        SpecSCC_10_fsm_Init0,
        SpecSCC_10_fsm_Init1
    };

    type SCC_14_out_0 = record {
        p0_guard : boolean,
        p1 : integer,
        p2 : boolean,
        p3 : boolean,
        p4 : boolean
    };


    type SCC_14_to_SpecSCC_10_out = record {
        write : boolean,
        data : SCC_14_out_0
    };

    type SpecSCC_10_out_0 = record {
        p0 : integer,
        p1 : boolean,
        p2 : boolean,
        p3 : boolean,
        p4 : integer
    };

    type SpecSCC_10_to_SCC_15_out = record {
        write : boolean,
        data : SpecSCC_10_out_0
    };

    type fifo_SCC_14_to_SpecSCC_10 = record {
        data_out : SCC_14_out_0,
        empty : boolean
    };

    type fifo_SpecSCC_10_to_SCC_15 = record {
        data_out : SpecSCC_10_out_0,
        empty : boolean
    };

    type fsm_cmd_x = record {
        nextInput : bv1,
        commit : bv1,
        muRollBack : bv3,
        arrayRollBack : bv32,
        rewind : bv3,
        rbwe : bv1,
        gammaRollBack_x : bv32,
        startStall_x : bv1,
        selSlowPath_x : bv32
    };




    type fsm_mispec_in_x = record {
        x : bv32
    };

    type statex = record {
        state : t_SpecSCC_10_fsm_state_new,
        rewindCpt : bv3,
        delayed_commit_0 : bv1,
        delayed_commit_1 : bv1,
        delayed_commit_2 : bv1,
        array_rollback : bv32,
        mu_rollback : bv3,
        rewind : bv3,
        rbwe : bv1,
        commit_x : bv1,
        selSlowPath_x : bv32,
        rollback_x : bv32,
        startStall_x : bv1,
        rewindDepth : bv3,
        slowPath_x : bv32
    };



    var SCC_14_SpecSCC_10_data : SCC_14_out_0;
    var SCC_14_SpecSCC_10_empty_flag : boolean;
    var SCC_14_SpecSCC_10_full_flag : boolean;
    var SpecSCC_10_SCC_15_data : SpecSCC_10_out_0;
    var SpecSCC_10_SCC_15_empty_flag : boolean;
    var SpecSCC_10_SCC_15_full_flag : boolean;
    var i : integer;
    var ccycles : integer;
    var io_state : integer;
    var _SpecSCC_10_dline3_1_dline_0 : integer;
    var _SpecSCC_10_dline3_1_dline_1 : integer;
    var _SpecSCC_10_dline3_1_dline_2 : integer;
    var _SpecSCC_10_dline2_2_dline_0 : boolean;
    var _SpecSCC_10_dline2_2_dline_1 : boolean;
    var _SpecSCC_10_dline1_3_dline_0 : statex;
    var SpecSCC_10_nextInput : bv1;
    var SpecSCC_10_commit : bv1;
    var SpecSCC_10_muRollback : bv3;
    var SpecSCC_10_rewind : bv3;
    var SpecSCC_10_rbwe : bv1;
    var SpecSCC_10_selSlowPath_x : bv32;
    var _SpecSCC_10_dline3_4_dline_0 : integer;
    var _SpecSCC_10_dline3_4_dline_1 : integer;
    var _SpecSCC_10_dline3_4_dline_2 : integer;
    var _SpecSCC_10_dline3_5_dline_0 : boolean;
    var _SpecSCC_10_dline3_5_dline_1 : boolean;
    var _SpecSCC_10_dline3_5_dline_2 : boolean;
    var _SpecSCC_10_dline3_6_dline_0 : boolean;
    var _SpecSCC_10_dline3_6_dline_1 : boolean;
    var _SpecSCC_10_dline3_6_dline_2 : boolean;
    var _SpecSCC_10_dline3_7_dline_0 : boolean;
    var _SpecSCC_10_dline3_7_dline_1 : boolean;
    var _SpecSCC_10_dline3_7_dline_2 : boolean;
    var _SpecSCC_10_dline3_8_dline_0 : integer;
    var _SpecSCC_10_dline3_8_dline_1 : integer;
    var _SpecSCC_10_dline3_8_dline_2 : integer;
    var loop_s : boolean;
    var start_s : boolean;
    var x : integer;
    var guard : boolean;
    var cmd : fsm_cmd_x;
    var _guard_0 : boolean;
    var _i_1 : integer;
    var SCC_14_out_0_var : SCC_14_to_SpecSCC_10_out;
    var SpecSCC_10_in_0 : SCC_14_out_0;
    var _SpecSCC_10_dline3_1_pop_0 : integer;
    var _SpecSCC_10_dline2_2_pop_1 : boolean;
    var _SpecSCC_10_dline1_3_pop_2 : statex;
    var _SpecSCC_10_dline3_4_pop_3 : integer;
    var _SpecSCC_10_dline3_5_pop_4 : boolean;
    var _SpecSCC_10_dline3_6_pop_5 : boolean;
    var _SpecSCC_10_dline3_7_pop_6 : boolean;
    var _SpecSCC_10_dline3_8_pop_7 : integer;
    var _rollBack_SpecSCC_10_28_x_mu_8 : integer;
    var _x_9 : integer;
    var SpecSCC_10_mu_x_10 : integer;
    var _fsm_x_next_11 : statex;
    var _mispec_12 : boolean;
    var _slow_13 : integer;
    var _fast_14 : integer;
    var _rewind_SpecSCC_10_34_15 : boolean;
    var _rewind_SpecSCC_10_35_16 : boolean;
    var _rewind_SpecSCC_10_37_17 : integer;
    var _rewind_SpecSCC_10_39_18 : boolean;
    var _rewind_SpecSCC_10_41_19 : boolean;
    var SpecSCC_10_out_0_var : SpecSCC_10_to_SCC_15_out;
    var SCC_15_in_0 : SpecSCC_10_out_0;
    var _io_state_0 : integer;
    var _io_printf_1 : integer;

    procedure SCC_14_SpecSCC_10_empty() returns ( ret : boolean)
    {
        ret = SCC_14_SpecSCC_10_empty_flag;
    }

    procedure SCC_14_SpecSCC_10_full() returns ( ret : boolean)
    {
        ret = SCC_14_SpecSCC_10_full_flag;
    }

    procedure SCC_14_SpecSCC_10_read() modifies SCC_14_SpecSCC_10_empty_flag,SCC_14_SpecSCC_10_full_flag;
    {
        SCC_14_SpecSCC_10_empty_flag = true;
        SCC_14_SpecSCC_10_full_flag = false;
    }

    procedure SCC_14_SpecSCC_10_write(_input: SCC_14_to_SpecSCC_10_out)
        modifies SCC_14_SpecSCC_10_empty_flag,
                 SCC_14_SpecSCC_10_full_flag,
                 SCC_14_SpecSCC_10_data;
    {

        if (_input.write) {
            SCC_14_SpecSCC_10_empty_flag = false;
            SCC_14_SpecSCC_10_full_flag = true;
            SCC_14_SpecSCC_10_data = _input.data;
        }

//;

}

    procedure SCC_14_SpecSCC_10_peek() returns ( ret : SCC_14_out_0)
    {
        ret = SCC_14_SpecSCC_10_data;
    }

    procedure SpecSCC_10_SCC_15_empty() returns ( ret : boolean)
    {
        ret = SpecSCC_10_SCC_15_empty_flag;
    }

    procedure SpecSCC_10_SCC_15_full() returns ( ret : boolean)
    {
        ret = SpecSCC_10_SCC_15_full_flag;
    }

    procedure SpecSCC_10_SCC_15_read()
        modifies SpecSCC_10_SCC_15_empty_flag,
                 SpecSCC_10_SCC_15_full_flag;
    {
        SpecSCC_10_SCC_15_empty_flag = true;
        SpecSCC_10_SCC_15_full_flag = false;
    }

    procedure SpecSCC_10_SCC_15_write(_input: SpecSCC_10_to_SCC_15_out)
        modifies SpecSCC_10_SCC_15_empty_flag,
                 SpecSCC_10_SCC_15_full_flag,
                 SpecSCC_10_SCC_15_data;
    {

        if (_input.write) {
            SpecSCC_10_SCC_15_empty_flag = false;
            SpecSCC_10_SCC_15_full_flag = true;
            SpecSCC_10_SCC_15_data = _input.data;
        }

    }

    procedure SpecSCC_10_SCC_15_peek() returns ( ret : SpecSCC_10_out_0)
    {
        ret = SpecSCC_10_SCC_15_data;
    }

    function next___3377907(in_0 : integer) : integer;
    function slow(in_0 : integer) : integer;
    function fast(in_0 : integer) : integer;
    function mispec(in_0 : integer) : boolean;
    function get_ticks() : integer;
    function get_trip_count() : integer;
    function rollBack_SpecSCC_10_28_x_mu(in_0 : integer,in_1 : bv3,in_2 : bv1) : integer;
    function rewind_SpecSCC_10_34(in_0 : boolean,in_1 : bv3,in_2 : bv1) : boolean;
    function rewind_SpecSCC_10_35(in_0 : boolean,in_1 : bv3,in_2 : bv1) : boolean;
    function rewind_SpecSCC_10_37(in_0 : integer,in_1 : bv3,in_2 : bv1) : integer;
    function rewind_SpecSCC_10_39(in_0 : boolean,in_1 : bv3,in_2 : bv1) : boolean;
    function rewind_SpecSCC_10_41(in_0 : boolean,in_1 : bv3,in_2 : bv1) : boolean;


    procedure SpecSCC_10_fsm_nxt(mispec_x_arg: bv32, state_arg: statex) returns ( ret : statex)
    {

        var mispec_x: bv32;
        var state: statex;
        mispec_x = mispec_x_arg;
        state = state_arg;

        case
        (state.state == SpecSCC_10_fsm_Proceed) : {

            state.rbwe = 1bv1;
            state.commit_x = 1bv1;
            state.selSlowPath_x = 0bv32;
            state.commit_x = 1bv1;

            if ((mispec_x == 1bv32)) {

                state.state = SpecSCC_10_fsm_x1__Rollback;
                state.rbwe = 0bv1;
                state.commit_x = 0bv1;
                state.rewindDepth = 3bv3;
                state.slowPath_x = 1bv32;
                state.startStall_x = 1bv1;
                state.selSlowPath_x = state.slowPath_x;
                state.rbwe = 1bv1;
                state.array_rollback = 3bv32;
                state.mu_rollback = 3bv3;
                state.rewind = state.rewindDepth;
            }
        }
        (state.state==SpecSCC_10_fsm_x1__Rollback) : {

            state.rbwe = 1bv1;
            state.selSlowPath_x = 0bv32;

            state.state = SpecSCC_10_fsm_x1__Fill0;
        }
        (state.state==SpecSCC_10_fsm_x1__Fill0) : {

            state.rbwe = 1bv1;
            state.selSlowPath_x = 0bv32;

            state.state = SpecSCC_10_fsm_x1__Fill1;
        }
        (state.state==SpecSCC_10_fsm_x1__Fill1) : {

            state.rbwe = 1bv1;
            state.selSlowPath_x = 0bv32;
            state.commit_x = 1bv1;
            state.selSlowPath_x = 0bv32;

            state.state = SpecSCC_10_fsm_Proceed;
        }
        (state.state==SpecSCC_10_fsm_Init0) : {

            state.rbwe = 1bv1;
            state.selSlowPath_x = 0bv32;

            state.state = SpecSCC_10_fsm_Init1;
        }
        (state.state==SpecSCC_10_fsm_Init1) : {

            state.rbwe = 1bv1;
            state.selSlowPath_x = 0bv32;

            state.state = SpecSCC_10_fsm_Proceed;
        }
        default : {

            state.array_rollback = 0bv32;
            state.mu_rollback = 0bv3;
            state.rewind = 0bv3;
            state.rbwe = 0bv1;
            state.commit_x = 0bv1;
            state.selSlowPath_x = 0bv32;
            state.rollback_x = 0bv32;
            state.startStall_x = 0bv1;
            state.rewindDepth = 0bv3;
            state.slowPath_x = 0bv32;
        }
        esac;

        ret = state;

    }

    procedure fsm_x_command(cs: statex) returns ( result : fsm_cmd_x)
    {

        result.nextInput = if ((cs.rewindCpt == 0bv3)) then 0bv1 else 1bv1;
        result.commit = cs.delayed_commit_0;
        result.rewind = cs.rewind;
        result.muRollBack = cs.mu_rollback;
        result.arrayRollBack = cs.array_rollback;
        result.gammaRollBack_x = cs.rollback_x;
        result.selSlowPath_x = cs.selSlowPath_x;
        result.startStall_x = cs.startStall_x;
        result.rbwe = cs.rbwe;
    }

    procedure fsm_x_next(mispecBits: fsm_mispec_in_x,currentState: statex) returns ( res : statex)
    {
        res = currentState;

        res.array_rollback = 0bv32;
        res.mu_rollback = 0bv3;
        res.rewind = 0bv3;
        res.rbwe = 0bv1;
        res.commit_x = 0bv1;
        res.selSlowPath_x = 0bv32;
        res.rollback_x = 0bv32;
        res.startStall_x = 0bv1;
        call (res) = SpecSCC_10_fsm_nxt(mispecBits.x, res);

        if ((res.rewindCpt > 0bv3)) {
            res.rewindCpt = (res.rewindCpt - 1bv3);
        }

        res.rewindCpt = (res.rewindCpt + res.rewind);
        res.delayed_commit_0 = (res.delayed_commit_1 & res.commit_x);
        res.delayed_commit_1 = res.delayed_commit_2;
        res.delayed_commit_2 = 1bv1;
    }

    procedure fsm_mispec_in_x_value_0(p_0: bv32) returns ( res : fsm_mispec_in_x)
    {
        res.x = p_0;
    }

    procedure SpecSCC_10_out_0_value_1(p_0: integer, p_1: boolean, p_2: boolean, p_3: boolean, p_4: integer)
        returns ( res : SpecSCC_10_out_0)
    {

        res.p0 = p_0;
        res.p1 = p_1;
        res.p2 = p_2;
        res.p3 = p_3;
        res.p4 = p_4;

    }

    procedure SpecSCC_10_to_SCC_15_out_value_2(p_0: boolean, p_1: SpecSCC_10_out_0)
        returns ( res : SpecSCC_10_to_SCC_15_out)
    {

        res.write = p_0;
        res.data = p_1;

    }

    procedure SCC_14_out_0_value_3(p_0: boolean, p_1: integer, p_2: boolean, p_3: boolean, p_4: boolean)
        returns ( res : SCC_14_out_0)
    {

        res.p0_guard = p_0;
        res.p1 = p_1;
        res.p2 = p_2;
        res.p3 = p_3;
        res.p4 = p_4;

    }

    procedure SCC_14_to_SpecSCC_10_out_value_4(p_0: boolean, p_1: SCC_14_out_0)
        returns ( res : SCC_14_to_SpecSCC_10_out)
    {

        res.write = p_0;
        res.data = p_1;

    }

    procedure statex_value_5(
        p_0: t_SpecSCC_10_fsm_state_new,
        p_1: bv3,
        p_2: bv1,
        p_3: bv1,
        p_4: bv1,
        p_5: bv32,
        p_6: bv3,
        p_7: bv3,
        p_8: bv1,
        p_9: bv1,
        p_10: bv32,
        p_11: bv32,
        p_12: bv1,
        p_13: bv3,
        p_14: bv32
    ) returns ( res : statex)
    {

        res.state = p_0;
        res.rewindCpt = p_1;
        res.delayed_commit_0 = p_2;
        res.delayed_commit_1 = p_3;
        res.delayed_commit_2 = p_4;
        res.array_rollback = p_5;
        res.mu_rollback = p_6;
        res.rewind = p_7;
        res.rbwe = p_8;
        res.commit_x = p_9;
        res.selSlowPath_x = p_10;
        res.rollback_x = p_11;
        res.startStall_x = p_12;
        res.rewindDepth = p_13;
        res.slowPath_x = p_14;

    }

    procedure fsmx_init() returns ( res : statex)
    {
        call (res) = statex_value_5(
            SpecSCC_10_fsm_Init0,
            0bv3,0bv1,0bv1,0bv1,0bv32,0bv3,0bv3,1bv1,
            0bv1,0bv32,0bv32,0bv1,0bv3,0bv32
        );
    }

    procedure SpecSCC_10_dline3_1_push(data_in: integer,push_enable: boolean)
        modifies _SpecSCC_10_dline3_1_dline_2,
                 _SpecSCC_10_dline3_1_dline_1,
                 _SpecSCC_10_dline3_1_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_1_dline_2 = _SpecSCC_10_dline3_1_dline_1;
            _SpecSCC_10_dline3_1_dline_1 = _SpecSCC_10_dline3_1_dline_0;
            _SpecSCC_10_dline3_1_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_1_pop(pop_enable_arg: boolean) returns ( res : integer)
    {
        res = _SpecSCC_10_dline3_1_dline_2;
    }

    procedure SpecSCC_10_dline2_2_push(data_in: boolean,push_enable: boolean)
        modifies _SpecSCC_10_dline2_2_dline_1,
                 _SpecSCC_10_dline2_2_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline2_2_dline_1 = _SpecSCC_10_dline2_2_dline_0;
            _SpecSCC_10_dline2_2_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline2_2_pop(pop_enable_arg: boolean) returns ( res : boolean)
    {
        res = _SpecSCC_10_dline2_2_dline_1;
    }

    procedure SpecSCC_10_dline1_3_push(data_in: statex,push_enable: boolean)
        modifies _SpecSCC_10_dline1_3_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline1_3_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline1_3_pop(pop_enable_arg: boolean) returns ( res : statex)
    {
        res = _SpecSCC_10_dline1_3_dline_0;
    }

    procedure SpecSCC_10_dline1_3_init(data_in: statex) modifies _SpecSCC_10_dline1_3_dline_0;
    {
        _SpecSCC_10_dline1_3_dline_0 = data_in;
    }

    procedure SpecSCC_10_dline3_4_push(data_in: integer,push_enable: boolean)
        modifies _SpecSCC_10_dline3_4_dline_2,
                 _SpecSCC_10_dline3_4_dline_1,
                 _SpecSCC_10_dline3_4_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_4_dline_2 = _SpecSCC_10_dline3_4_dline_1;
            _SpecSCC_10_dline3_4_dline_1 = _SpecSCC_10_dline3_4_dline_0;
            _SpecSCC_10_dline3_4_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_4_pop(pop_enable_arg: boolean) returns ( res : integer)
    {
        res = _SpecSCC_10_dline3_4_dline_2;
    }

    procedure SpecSCC_10_dline3_5_push(data_in: boolean,push_enable: boolean)
        modifies _SpecSCC_10_dline3_5_dline_2,
                 _SpecSCC_10_dline3_5_dline_1,
                 _SpecSCC_10_dline3_5_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_5_dline_2 = _SpecSCC_10_dline3_5_dline_1;
            _SpecSCC_10_dline3_5_dline_1 = _SpecSCC_10_dline3_5_dline_0;
            _SpecSCC_10_dline3_5_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_5_pop(pop_enable_arg: boolean) returns ( res : boolean)
    {
        res = _SpecSCC_10_dline3_5_dline_2;
    }

    procedure SpecSCC_10_dline3_6_push(data_in: boolean,push_enable: boolean)
        modifies _SpecSCC_10_dline3_6_dline_2,
                 _SpecSCC_10_dline3_6_dline_1,
                 _SpecSCC_10_dline3_6_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_6_dline_2 = _SpecSCC_10_dline3_6_dline_1;
            _SpecSCC_10_dline3_6_dline_1 = _SpecSCC_10_dline3_6_dline_0;
            _SpecSCC_10_dline3_6_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_6_pop(pop_enable_arg: boolean) returns ( res : boolean)
    {
        res = _SpecSCC_10_dline3_6_dline_2;
    }

    procedure SpecSCC_10_dline3_7_push(data_in: boolean, push_enable: boolean)
        modifies _SpecSCC_10_dline3_7_dline_2,
                 _SpecSCC_10_dline3_7_dline_1,
                 _SpecSCC_10_dline3_7_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_7_dline_2 = _SpecSCC_10_dline3_7_dline_1;
            _SpecSCC_10_dline3_7_dline_1 = _SpecSCC_10_dline3_7_dline_0;
            _SpecSCC_10_dline3_7_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_7_pop(pop_enable_arg: boolean) returns ( res : boolean)
    {
        res = _SpecSCC_10_dline3_7_dline_2;
    }

    procedure SpecSCC_10_dline3_8_push(data_in: integer, push_enable: boolean)
        modifies _SpecSCC_10_dline3_8_dline_2,
                 _SpecSCC_10_dline3_8_dline_1,
                 _SpecSCC_10_dline3_8_dline_0;
    {

        if (push_enable) {
            _SpecSCC_10_dline3_8_dline_2 = _SpecSCC_10_dline3_8_dline_1;
            _SpecSCC_10_dline3_8_dline_1 = _SpecSCC_10_dline3_8_dline_0;
            _SpecSCC_10_dline3_8_dline_0 = data_in;
        }

    }

    procedure SpecSCC_10_dline3_8_pop(pop_enable_arg: boolean) returns ( res : integer)
    {
        res = _SpecSCC_10_dline3_8_dline_2;
    }

    procedure init_single_spec()
        modifies x,
                 io_state,
                 guard,
                 start_s,
                 loop_s,
                 ccycles,
                 _SpecSCC_10_dline1_3_dline_0;
    {

        var tmpvar_fsmx_init0: statex;

        call (tmpvar_fsmx_init0) = fsmx_init();
        x = 305419896;
        io_state = 0;
        guard = true;
        call SpecSCC_10_dline1_3_init(tmpvar_fsmx_init0);
        start_s = true;
        loop_s = true;
        ccycles = (-1);

    }

    procedure next_single_spec()
        modifies loop_s,
                 ccycles,
                 SCC_15_in_0,
                 _io_state_0,
                 io_state,
                 _io_printf_1,
                 SpecSCC_10_in_0,
                 _SpecSCC_10_dline3_1_pop_0,
                 _SpecSCC_10_dline2_2_pop_1,
                 _SpecSCC_10_dline1_3_pop_2,
                 cmd,
                 SpecSCC_10_nextInput,
                 SpecSCC_10_commit,
                 SpecSCC_10_muRollback,
                 SpecSCC_10_rewind,
                 SpecSCC_10_rbwe,
                 SpecSCC_10_selSlowPath_x,
                 _SpecSCC_10_dline3_4_pop_3,
                 _SpecSCC_10_dline3_5_pop_4,
                 _SpecSCC_10_dline3_6_pop_5,
                 _SpecSCC_10_dline3_7_pop_6,
                 _SpecSCC_10_dline3_8_pop_7,
                 SpecSCC_10_mu_x_10,
                 x,
                 _rollBack_SpecSCC_10_28_x_mu_8,
                 _fsm_x_next_11,
                 _mispec_12,
                 _slow_13,
                 _fast_14,
                 _x_9,
                 _rewind_SpecSCC_10_34_15,
                 _rewind_SpecSCC_10_35_16,
                 _rewind_SpecSCC_10_37_17,
                 _rewind_SpecSCC_10_39_18,
                 _rewind_SpecSCC_10_41_19,
                 SpecSCC_10_out_0_var,
                 _guard_0,
                 guard,
                 _i_1,
                 i,
                 SCC_14_out_0_var,
                 start_s,
                 SpecSCC_10_SCC_15_empty_flag,
                 SpecSCC_10_SCC_15_data,
                 SpecSCC_10_SCC_15_full_flag,
                 SCC_14_SpecSCC_10_empty_flag,
                 SCC_14_SpecSCC_10_data,
                 _SpecSCC_10_dline3_1_dline_2,
                 _SpecSCC_10_dline2_2_dline_1,
                 _SpecSCC_10_dline1_3_dline_0,
                 _SpecSCC_10_dline3_4_dline_2,
                 _SpecSCC_10_dline3_5_dline_2,
                 _SpecSCC_10_dline3_6_dline_2,
                 _SpecSCC_10_dline3_7_dline_2,
                 _SpecSCC_10_dline3_8_dline_2,
                 _SpecSCC_10_dline2_2_dline_0,
                 _SpecSCC_10_dline3_1_dline_1,
                 _SpecSCC_10_dline3_1_dline_0,
                 _SpecSCC_10_dline3_4_dline_1,
                 _SpecSCC_10_dline3_4_dline_0,
                 _SpecSCC_10_dline3_5_dline_1,
                 _SpecSCC_10_dline3_5_dline_0,
                 _SpecSCC_10_dline3_8_dline_1,
                 _SpecSCC_10_dline3_8_dline_0,
                 _SpecSCC_10_dline3_6_dline_1,
                 _SpecSCC_10_dline3_6_dline_0,
                 _SpecSCC_10_dline3_7_dline_1,
                 _SpecSCC_10_dline3_7_dline_0,
                 SCC_14_SpecSCC_10_full_flag;
    {

        var tmpvar_SCC_14_SpecSCC_10_full5: boolean;
        var tmpvar_SCC_14_SpecSCC_10_empty1: boolean;
        var tmpvar_SpecSCC_10_out_0_value_14: SpecSCC_10_out_0;
        var tmpvar_fsm_mispec_in_x_value_03: fsm_mispec_in_x;
        var tmpvar_SpecSCC_10_SCC_15_full2: boolean;
        var tmpvar_SpecSCC_10_SCC_15_empty0: boolean;
        var tmpvar_SCC_14_out_0_value_36: SCC_14_out_0;

        if (loop_s) {

            ccycles = ccycles + 1;


            call (tmpvar_SpecSCC_10_SCC_15_empty0) = SpecSCC_10_SCC_15_empty();

            if ((!tmpvar_SpecSCC_10_SCC_15_empty0)) {

                call (SCC_15_in_0) = SpecSCC_10_SCC_15_peek();

                _io_state_0 = io_state;
                loop_s = SCC_15_in_0.p1;
                _io_printf_1 = 0;
                io_state = if (SCC_15_in_0.p2) then _io_state_0 else _io_printf_1;

                call SpecSCC_10_SCC_15_read();
            }

            call (tmpvar_SCC_14_SpecSCC_10_empty1) = SCC_14_SpecSCC_10_empty();
            call (tmpvar_SpecSCC_10_SCC_15_full2) = SpecSCC_10_SCC_15_full();

            if (((!tmpvar_SCC_14_SpecSCC_10_empty1) && (!tmpvar_SpecSCC_10_SCC_15_full2))) {

                call (SpecSCC_10_in_0) = SCC_14_SpecSCC_10_peek();

                call (_SpecSCC_10_dline3_1_pop_0) = SpecSCC_10_dline3_1_pop(true);
                call (_SpecSCC_10_dline2_2_pop_1) = SpecSCC_10_dline2_2_pop(true);
                call (_SpecSCC_10_dline1_3_pop_2) = SpecSCC_10_dline1_3_pop(true);

                call (cmd) = fsm_x_command(_SpecSCC_10_dline1_3_pop_2);

                SpecSCC_10_nextInput = cmd.nextInput;
                SpecSCC_10_commit = cmd.commit;
                SpecSCC_10_muRollback = cmd.muRollBack;
                SpecSCC_10_rewind = cmd.rewind;
                SpecSCC_10_rbwe = cmd.rbwe;
                SpecSCC_10_selSlowPath_x = cmd.selSlowPath_x;

                call (_SpecSCC_10_dline3_4_pop_3) = SpecSCC_10_dline3_4_pop(true);
                call (_SpecSCC_10_dline3_5_pop_4) = SpecSCC_10_dline3_5_pop(true);
                call (_SpecSCC_10_dline3_6_pop_5) = SpecSCC_10_dline3_6_pop(true);
                call (_SpecSCC_10_dline3_7_pop_6) = SpecSCC_10_dline3_7_pop(true);
                call (_SpecSCC_10_dline3_8_pop_7) = SpecSCC_10_dline3_8_pop(true);

                SpecSCC_10_mu_x_10 = x;

                _rollBack_SpecSCC_10_28_x_mu_8 = rollBack_SpecSCC_10_28_x_mu(
                        SpecSCC_10_mu_x_10,
                        SpecSCC_10_muRollback,
                        SpecSCC_10_rbwe
                );

                call (tmpvar_fsm_mispec_in_x_value_03) = fsm_mispec_in_x_value_0(
                        if (_SpecSCC_10_dline2_2_pop_1) then 0bv32 else 1bv32
                );
                call (_fsm_x_next_11) = fsm_x_next(
                        tmpvar_fsm_mispec_in_x_value_03,
                        _SpecSCC_10_dline1_3_pop_2
                );

                call SpecSCC_10_dline1_3_push(_fsm_x_next_11, true);
                _mispec_12 = mispec(_rollBack_SpecSCC_10_28_x_mu_8);

                call SpecSCC_10_dline2_2_push(_mispec_12, true);
                _slow_13 = slow(_rollBack_SpecSCC_10_28_x_mu_8);

                call SpecSCC_10_dline3_1_push(_slow_13, true);
                _fast_14 = fast(_rollBack_SpecSCC_10_28_x_mu_8);

                _x_9 = if (SpecSCC_10_selSlowPath_x == 0bv32) then
                            _fast_14 else
                            _SpecSCC_10_dline3_1_pop_0;

                call SpecSCC_10_dline3_4_push(_x_9, true);

                _rewind_SpecSCC_10_34_15 = rewind_SpecSCC_10_34(
                        SpecSCC_10_in_0.p2,
                        SpecSCC_10_rewind,
                        SpecSCC_10_nextInput
                );

                x = if (_rewind_SpecSCC_10_34_15) then
                        _rollBack_SpecSCC_10_28_x_mu_8 else
                        _x_9;

                _rewind_SpecSCC_10_35_16 = rewind_SpecSCC_10_35(
                        SpecSCC_10_in_0.p0_guard,
                        SpecSCC_10_rewind,
                        SpecSCC_10_nextInput
                );

                call SpecSCC_10_dline3_5_push(_rewind_SpecSCC_10_35_16, true);
                _rewind_SpecSCC_10_37_17 = rewind_SpecSCC_10_37(
                        SpecSCC_10_in_0.p1,
                        SpecSCC_10_rewind,
                        SpecSCC_10_nextInput
                );

                call SpecSCC_10_dline3_8_push(_rewind_SpecSCC_10_37_17, true);
                _rewind_SpecSCC_10_39_18 = rewind_SpecSCC_10_39(
                        SpecSCC_10_in_0.p3,
                        SpecSCC_10_rewind,
                        SpecSCC_10_nextInput
                );

                call SpecSCC_10_dline3_6_push(_rewind_SpecSCC_10_39_18, true);
                _rewind_SpecSCC_10_41_19 = rewind_SpecSCC_10_41(
                        SpecSCC_10_in_0.p4,
                        SpecSCC_10_rewind,
                        SpecSCC_10_nextInput
                );

                call SpecSCC_10_dline3_7_push(_rewind_SpecSCC_10_41_19, true);

                call (tmpvar_SpecSCC_10_out_0_value_14) = SpecSCC_10_out_0_value_1(
                        _SpecSCC_10_dline3_4_pop_3,
                        _SpecSCC_10_dline3_5_pop_4,
                        _SpecSCC_10_dline3_6_pop_5,
                        _SpecSCC_10_dline3_7_pop_6,
                        _SpecSCC_10_dline3_8_pop_7
                );
                call (SpecSCC_10_out_0_var) = SpecSCC_10_to_SCC_15_out_value_2(
                        SpecSCC_10_commit == 0bv1,
                        tmpvar_SpecSCC_10_out_0_value_14
                );

                call SpecSCC_10_SCC_15_write(SpecSCC_10_out_0_var);

                if (cmd.nextInput == 0bv1) {
                    call SCC_14_SpecSCC_10_read();
                }
            }


            call (tmpvar_SCC_14_SpecSCC_10_full5) = SCC_14_SpecSCC_10_full();

            if ((!tmpvar_SCC_14_SpecSCC_10_full5)) {

                _guard_0 = guard;
                _i_1 = i;

                i = if (_guard_0) then
                        _i_1 else
                        _i_1 + 1;

                guard = i < 1024;

                call (tmpvar_SCC_14_out_0_value_36) = SCC_14_out_0_value_3(
                        guard,
                        _i_1,
                        _guard_0,
                        _guard_0,
                        _guard_0
                );
                call (SCC_14_out_0_var) = SCC_14_to_SpecSCC_10_out_value_4(
                        true,
                        tmpvar_SCC_14_out_0_value_36
                );

                call SCC_14_SpecSCC_10_write(SCC_14_out_0_var);
            }

            start_s = false;
        }

    }



    var t : integer;

    init {
        t =0;
        call init_single_spec();
    }

    next {
        t'= t +1;
        call next_single_spec();
    }


    control {
        induction(10);
        check;
        print_results;
    }
}
