module main{

	
	type size_t = integer;
	type ptr_integer = integer;
	type va_list = ptr_integer;
	type TFILE = record {
	_dummy123 : integer
};

	type FILE = TFILE;
	type fpos_t = integer;
	type _FILE = FILE;
	type ptr__FILE = integer;
	
	type ptr_FILE = integer;
	
	
	type ptr_fpos_t = integer;
	
	
	
	
	
	
	type _size_t = size_t;
	type ptr_void = integer;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	type ptr_ptr_integer = integer;
	
	
	
	type fsm_cmd_x = record {
	nextInput : boolean,
	commit : bv1,
	muRollBack : bv32,
	arrayRollBack : bv32,
	rewind : bv2,
	rbwe : bv1,
	gammaRollBack_x : bv32,
	startStall_x : bv1,
	selSlowPath_x : bv32
};

	
	
	
	
	type t_SpecSCC_10_fsm_state_new = enum {SpecSCC_10_fsm_Proceed,SpecSCC_10_fsm_x1__Rollback,SpecSCC_10_fsm_x1__Fill0,SpecSCC_10_fsm_x1__Fill1,SpecSCC_10_fsm_Init0,SpecSCC_10_fsm_Init1 };
	type statex = record {
	state : t_SpecSCC_10_fsm_state_new,
	rewindCpt : bv2,
	delayed_commit_0 : bv1,
	delayed_commit_1 : bv1,
	delayed_commit_2 : bv1,
	array_rollback : bv32,
	mu_rollback : bv32,
	rewind : bv2,
	rbwe : bv1,
	commit_x : bv1,
	selSlowPath_x : bv32,
	rollback_x : bv32,
	startStall_x : bv1,
	rewindDepth : bv2,
	slowPath_x : bv32
};

	
	type fsm_mispec_in_x = record {
	x : bv32
};

	
	
	
	
	var EOF : integer;
	var stdin : ptr__FILE;
	var stdout : ptr__FILE;
	var stderr : ptr__FILE;
	var io_state : integer;
	
	function fclose(in_0 : ptr_FILE) : integer;
	function feof(in_0 : ptr_FILE) : integer;
	function ferror(in_0 : ptr_FILE) : integer;
	function fflush(in_0 : ptr_FILE) : integer;
	function fgetc(in_0 : ptr_FILE) : integer;
	function fgetpos(in_0 : ptr_FILE,in_1 : ptr_fpos_t) : integer;
	function fgets(in_0 : ptr_integer,in_1 : integer,in_2 : ptr_FILE) : ptr_integer;
	function fopen(in_0 : ptr_integer,in_1 : ptr_integer) : ptr__FILE;
	function fprintf(in_0 : ptr_FILE,in_1 : ptr_integer) : integer;
	function fputc(in_0 : integer,in_1 : ptr_FILE) : integer;
	function fputs(in_0 : ptr_integer,in_1 : ptr_FILE) : integer;
	function fread(in_0 : ptr_void,in_1 : size_t,in_2 : size_t,in_3 : ptr_FILE) : _size_t;
	function freopen(in_0 : ptr_integer,in_1 : ptr_integer,in_2 : ptr_FILE) : ptr__FILE;
	function fscanf(in_0 : ptr_FILE,in_1 : ptr_integer) : integer;
	function fseek(in_0 : ptr_FILE,in_1 : integer,in_2 : integer) : integer;
	function fsetpos(in_0 : ptr_FILE,in_1 : ptr_fpos_t) : integer;
	function ftell(in_0 : ptr_FILE) : integer;
	function fwrite(in_0 : ptr_void,in_1 : size_t,in_2 : size_t,in_3 : ptr_FILE) : _size_t;
	function getc(in_0 : ptr_FILE) : integer;
	function getchar() : integer;
	function gets(in_0 : ptr_integer) : ptr_integer;
	
	function printf(in_0 : ptr_integer) : integer;
	function putc(in_0 : integer,in_1 : ptr_FILE) : integer;
	function putchar(in_0 : integer) : integer;
	function puts(in_0 : ptr_integer) : integer;
	function remove(in_0 : ptr_integer) : integer;
	function rename(in_0 : ptr_integer,in_1 : ptr_integer) : integer;
	
	function scanf(in_0 : ptr_integer) : integer;
	
	
	
	function setvbuf(in_0 : ptr_FILE,in_1 : ptr_integer,in_2 : integer,in_3 : size_t) : integer;
	function sprintf(in_0 : ptr_integer,in_1 : ptr_integer) : integer;
	function sscanf(in_0 : ptr_integer,in_1 : ptr_integer) : integer;
	function tmpfile() : ptr__FILE;
	function tmpnam(in_0 : ptr_integer) : ptr_integer;
	function ungetc(in_0 : integer,in_1 : ptr_FILE) : integer;
	function vfprintf(in_0 : ptr_FILE,in_1 : ptr_integer) : integer;
	function vprintf(in_0 : ptr_integer) : integer;
	function vsprintf(in_0 : ptr_integer,in_1 : ptr_integer) : integer;
	function fcloseall() : integer;
	function asprintf(in_0 : ptr_ptr_integer,in_1 : ptr_integer) : integer;
	function vasprintf(in_0 : ptr_ptr_integer,in_1 : ptr_integer) : integer;
	function getenv(in_0 : ptr_integer) : ptr_integer;
	function popen(in_0 : ptr_integer,in_1 : ptr_integer) : ptr_FILE;
	function pclose(in_0 : ptr_FILE) : integer;
	procedure SpecSCC_10_fsm_nxt(mispec_x_arg: bv32,state_arg: statex) returns ( ret_SpecSCC_10_fsm_nxt : statex) 
{
	var mispec_x:bv32;
	var state:statex;
	mispec_x = mispec_x_arg;
	state = state_arg;
	
	case
	(state.state==SpecSCC_10_fsm_Proceed) : {
		state.rbwe = 1bv1;
		state.commit_x = 1bv1;
		state.selSlowPath_x = 0bv32;
		state.commit_x = 1bv1;
		if ((mispec_x == 1bv32)) {	
			state.state = SpecSCC_10_fsm_x1__Rollback;
			state.rbwe = 0bv1;
			state.commit_x = 0bv1;
			state.rewindDepth = 3bv2;
			state.slowPath_x = 1bv32;
			state.startStall_x = 1bv1;
			state.selSlowPath_x = state.slowPath_x;
			state.rbwe = 1bv1;
			state.array_rollback = 3bv32;
			state.mu_rollback = 3bv32;
			state.rewind = state.rewindDepth; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	(state.state==SpecSCC_10_fsm_x1__Rollback) : {
		state.rbwe = 1bv1;
		state.selSlowPath_x = 0bv32;
		if (true) {	
			state.state = SpecSCC_10_fsm_x1__Fill0; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	(state.state==SpecSCC_10_fsm_x1__Fill0) : {
		state.rbwe = 1bv1;
		state.selSlowPath_x = 0bv32;
		if (true) {	
			state.state = SpecSCC_10_fsm_x1__Fill1; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	(state.state==SpecSCC_10_fsm_x1__Fill1) : {
		state.rbwe = 1bv1;
		state.selSlowPath_x = 0bv32;
		state.commit_x = 1bv1;
		state.selSlowPath_x = 0bv32;
		if (true) {	
			state.state = SpecSCC_10_fsm_Proceed; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	(state.state==SpecSCC_10_fsm_Init0) : {
		state.rbwe = 1bv1;
		state.selSlowPath_x = 0bv32;
		if (true) {	
			state.state = SpecSCC_10_fsm_Init1; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	(state.state==SpecSCC_10_fsm_Init1) : {
		state.rbwe = 1bv1;
		state.selSlowPath_x = 0bv32;
		if (true) {	
			state.state = SpecSCC_10_fsm_Proceed; 
		} 
		
		// No equivalent to BreakInstructionImpl;	
	}
	default : {
		state.array_rollback = 0bv32;
		state.mu_rollback = 0bv32;
		state.rewind = 0bv2;
		state.rbwe = 0bv1;
		state.commit_x = 0bv1;
		state.selSlowPath_x = 0bv32;
		state.rollback_x = 0bv32;
		state.startStall_x = 0bv1;
		state.rewindDepth = 0bv2;
		state.slowPath_x = 0bv32;	
	}
	esac;
	
	ret_SpecSCC_10_fsm_nxt=state;
}

	procedure fsm_x_command(cs_arg: statex) returns ( ret_fsm_x_command : fsm_cmd_x) 
{
	var result : fsm_cmd_x;
	var cs:statex;
	cs = cs_arg;
	
	result.nextInput = (cs.rewindCpt == 0bv2);
	result.commit = cs.delayed_commit_0;
	result.rewind = cs.rewind;
	result.muRollBack = cs.mu_rollback;
	result.arrayRollBack = cs.array_rollback;
	result.gammaRollBack_x = cs.rollback_x;
	result.selSlowPath_x = cs.selSlowPath_x;
	result.startStall_x = cs.startStall_x;
	result.rbwe = cs.rbwe;
	ret_fsm_x_command=result;
}

	procedure fsm_x_next(mispecBits_arg: fsm_mispec_in_x,currentState_arg: statex) returns ( ret_fsm_x_next : statex) 
{
	var mispecBits:fsm_mispec_in_x;
	var currentState:statex;
	mispecBits = mispecBits_arg;
	currentState = currentState_arg;
	
	currentState.array_rollback = 0bv32;
	currentState.mu_rollback = 0bv32;
	currentState.rewind = 0bv2;
	currentState.rbwe = 0bv1;
	currentState.commit_x = 0bv1;
	currentState.selSlowPath_x = 0bv32;
	currentState.rollback_x = 0bv32;
	currentState.startStall_x = 0bv1;
	call (currentState) = SpecSCC_10_fsm_nxt(mispecBits.x,currentState);
	if ((currentState.rewindCpt > 0bv2)) {	
		currentState.rewindCpt = (currentState.rewindCpt - 1bv2); 
	} 
	
	currentState.rewindCpt = (currentState.rewindCpt + currentState.rewind);
	currentState.delayed_commit_0 = (currentState.delayed_commit_1 & currentState.commit_x);
	currentState.delayed_commit_1 = currentState.delayed_commit_2;
	currentState.delayed_commit_2 = 1bv1;
	ret_fsm_x_next=currentState;
}

	function io_printf(in_0 : integer,in_1 : boolean,in_2 : ptr_integer) : integer;
var t : integer;
var _finished123: boolean;

			init {
				t =0;
			_finished123 = false;
			//;
			}
		
			next {
				t'= t +1;
			if (!(true)) {
				_finished123' = true;
			}
			if (!_finished123') {
				if (true) {	
					//;
				} 
			}
			}

		
			control {
				induction;
				check;
				print_results;
			}
			}
